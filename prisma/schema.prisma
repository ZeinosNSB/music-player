generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id               String             @id @default(cuid())
  name             String
  email            String             @unique
  password         String
  avatar           String?
  role             Role               @default(USER)
  Session          Session[]
  ListeningHistory ListeningHistory[]
  FavoriteList     FavoriteList[]
  Playlist         Playlist[]
  PlaylistShare    PlaylistShare[]
  SearchHistory    SearchHistory[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Session {
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  token      String
  deviceInfo String?
  createdAt  DateTime @default(now())
  expiresAt  DateTime

  @@id([token])
}

model Song {
  id               String             @id @default(cuid())
  title            String
  artists          Json
  album            String?
  duration         Int
  thumbnail        String?
  source128        String
  source320        String?
  releaseDate      DateTime?
  ListeningHistory ListeningHistory[]
  FavoriteList     FavoriteList[]
  PlaylistSong     PlaylistSong[]
}

model ListeningHistory {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  songId         String
  song           Song     @relation(fields: [songId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  playedAt       DateTime @default(now())
  durationPlayed Int?

  @@index([userId, playedAt])
}

model FavoriteList {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  songId    String
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt DateTime @default(now())

  @@index([userId])
}

model Playlist {
  id            String          @id @default(cuid())
  name          String
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  isPublic      Boolean         @default(false)
  description   String?
  thumbnail     String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  PlaylistSong  PlaylistSong[]
  PlaylistShare PlaylistShare[]

  @@unique([userId, name])
  @@index([userId, createdAt])
}

model PlaylistSong {
  id         String   @id @default(cuid())
  playlistId String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  songId     String
  song       Song     @relation(fields: [songId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt  DateTime @default(now())

  @@index([playlistId])
}

model PlaylistShare {
  id         String   @id @default(cuid())
  playlistId String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sharedAt   DateTime @default(now())

  @@unique([playlistId, userId])
  @@index([userId])
}

model SearchHistory {
  id         String   @id @default(uuid())
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  keyword    String
  searchedAt DateTime @default(now())

  @@index([userId, searchedAt])
}
